
1)Setting a map's initial state programmatically

- I've previously described how to set a map's initial state in an activity or fragment's XML layout code. But in this project named InitialStateJava, I've removed that code from the XML layout file, activitymap.xml. And I'll initialize the map's behavior as the app opens using Java code instead. In the MainActivity class, I've added constants for the latitude and longitude of three major cities, Seattle, Sidney, and New York. And I'll describe how to write the Java code that will turn these double values into something that controls the map. Right now, when my app first opens up, it starts at the default location, with latitude and longitude both set to zero. It's also set to the default zoom value. And I'll show you how to control all of these features. I'll go to the bottom of my MainActivity class and I'll create a new method that I'll name gotoLocation. Initially, it'll accept two arguments, two doubles named Lat and Lng. It'll be private, and it'll return void, and it'll be named gotoLocation. And there are the two double arguments, Lat and Lng for longitude. To control the latitude and longitude, create an instance of the class, LatLng. It's a member of the package "com.google.android.gms.maps.model." I'll type the beginning of the class name and select it. That adds the import at the top of the code. And I'll name it LatLng, and I'll initialize it with it's constructor method, New LatLng, and I'll passe in the two double values. So, this object now represents a particular location on the map. Next, I need to wrap that object inside something called a Camera Update. The Camera Update class is also part of the mapping API. And I'll name it Update. I'll instantiate it using a factory class named Camera Update Factory. The Camera Update Factory class has a whole bunch of static methods that you can use to create Update objects. And the Update objects define what you're going to do with the map. I'll use this one, New LatLng, and I'll pass in my LatLng object. Then, I'll call mMap, and then Move Camera, and I'll pass in the Update object. That's all I need for this task. There's actually a couple of different methods you can use to change how the map looks. Move Camera and Animate Camera. If you're setting the initial state of a map, you should use Move Camera. It simply switches the view. But if you're map is already visible, and you want to show the transition from one location or one zoom value to another, you should instead use Animate Camera. So now, I'll go back up to the top of my code where I'm initializing the map, and setting it's initial state. And I'll place the cursor right here after my toast message, and I'll call my new gotoLocation method, and I'll pass in Seattle Lat and Seattle Lng. And then, I'll run the code. When the map appears, it's showing the western United States at the center of the map. But, let's say that like in the XML example, I want to start at a different zoom factor. I'll go back to my code, and I'll make some changes in my gotoLocation method. I'll scroll down here, and I'll change the signature of my gotoLocation method to incorporate a zoom value. A zoom value is a float. So, I'll pass in a third argument typed as Float and I'll name it Zoom. Then, when I create my Update object, instead of calling New LatLng, I'll call another method named New LatLngZoom. This method takes two arguments, the LatLng object and the zoom value, and I'll pass that in. And then once again, I'll move the camera. Now, I'll go back to where I'm calling the gotoLocation method. And in addition to passing in the float values for the latitude and longitude, I'll pass in a value of five. Then, I'll show what that value looks like. And this time, I can see the city names. But, let's zoom in a little bit more. I'll change the zoom value from five to 15. And this time, I can see the actual streets in the city of Seattle. Try different settings with this version of the application, such as different latitudes and longitudes, and different levels of zoom. And that's just the beginning of what you can do programatically when the application first opens. You can set the default zoom, the latitude and longitude, and everything else about the map, including enabling and disabling various gestures, and setting the type of map that you display.

